1. I did not collaborate with anyone on this assignment

2. For the most part yes, the sorting as far as I know is correct and the
time it took for each part seems to agree with our assumptions based on 
the runtimes of each of the sorting algorithms used

4. This assignmment was pretty interesting as we got to implement the functions
and basic threading concepts that allowed us to analyze the time it takes
for sorting to complete with a single thread that iterates and sorts the entire
array in one flow of execution and two threads that each sort one half of the 
given array with the given size. Being able to utilize one sort function with two 
threads was something I was trying to implement but couldn't quite figure out because
sorting each half of the array requires one thread to iterate from the beginning of the 
array and the other thread to begin iterating from the middle to the end. I ended 
up creating two thread functions that each sort the array from the beginning 
to the middle and then middle to end.

5. 

Program output: 

qsy775@fox05:~/courses/cs3733/assign4$ make 
gcc part1.c -lm -o part1 -lpthread
javac part2.java
qsy775@fox05:~/courses/cs3733/assign4$ make run2
./part1 1000
Sorting is done in 1.27ms when one thread is used
Sorting is done in 0.15ms when two threads are used
./part1 5000
Sorting is done in 22.88ms when one thread is used
Sorting is done in 14.74ms when two threads are used
./part1 10000
Sorting is done in 93.83ms when one thread is used
Sorting is done in 67.57ms when two threads are used
./part1 20000
Sorting is done in 381.64ms when one thread is used
Sorting is done in 284.30ms when two threads are used
qsy775@fox05:~/courses/cs3733/assign4$

qsy775@fox05:~/courses/cs3733/assign4$ make
gcc part1.c -lm -o part1 -lpthread
javac part2.java
qsy775@fox05:~/courses/cs3733/assign4$ make run4
java part2 1000
Sorting is done in 8.22 ms when one thread is used
Sorting is done in 2.64 ms when two threads are used
java part2 5000
Sorting is done in 13.16 ms when one thread is used
Sorting is done in 10.78 ms when two threads are used
java part2 10000
Sorting is done in 27.48 ms when one thread is used
Sorting is done in 15.07 ms when two threads are used
java part2 20000
Sorting is done in 93.93 ms when one thread is used
Sorting is done in 31.57 ms when two threads are used
qsy775@fox05:~/courses/cs3733/assign4$


********* Part1.c ********************* 
        |           |  # of
    N   |   Time    |  threads
________|___________|______________
        |  1.27 ms  | Single Thread
1,000   |  0.15 ms  | Two Threads
________|___________|______________
        |  22.88 ms | Single Thread
5,000   |  14.74 ms | Two Threads
________|___________|_______________
        |  93.83 ms | Single Thread
10,000  |  67.57 ms | Two Threads
________|___________|________________
        | 381.64 ms | Single Thread
20,000  | 284.30 ms | Two Threads
        |___________|

*Using two threads that sort each half of the array speeds up 
execution time.

********* Part2.java *******************
        |           |  # of
    N   |   Time    |  threads
________|___________|______________
        |  8.22 ms  | Single Thread
1,000   |  2.64 ms  | Two Threads
________|___________|______________
        | 13.16 ms  | Single Thread
5,000   | 10.78 ms  | Two Threads
________|___________|_______________
        | 27.48 ms  | Single Thread
10,000  | 15.07 ms  | Two Threads
________|___________|________________
        | 93.93 ms  | Single Thread
20,000  | 31.57 ms  | Two Threads
        |___________|
*Somehow Java seems to be executing the sorting of the arrays
faster than C when the array sizes are greater than 1,000

qsy775@fox05:~/courses/cs3733/assign4$ make 
gcc part1.c -lm -o part1 -lpthread
javac part2.java
qsy775@fox05:~/courses/cs3733/assign4$ make run2
./part1 1000
Sorting is done in 1.27ms when one thread is used
Sorting is done in 0.15ms when two threads are used
./part1 5000
Sorting is done in 22.88ms when one thread is used
Sorting is done in 14.74ms when two threads are used
./part1 10000
Sorting is done in 93.83ms when one thread is used
Sorting is done in 67.57ms when two threads are used
./part1 20000
Sorting is done in 381.64ms when one thread is used
Sorting is done in 284.30ms when two threads are used
qsy775@fox05:~/courses/cs3733/assign4$

qsy775@fox05:~/courses/cs3733/assign4$ make
gcc part1.c -lm -o part1 -lpthread
javac part2.java
qsy775@fox05:~/courses/cs3733/assign4$ make run4
java part2 1000
Sorting is done in 8.22 ms when one thread is used
Sorting is done in 2.64 ms when two threads are used
java part2 5000
Sorting is done in 13.16 ms when one thread is used
Sorting is done in 10.78 ms when two threads are used
java part2 10000
Sorting is done in 27.48 ms when one thread is used
Sorting is done in 15.07 ms when two threads are used
java part2 20000
Sorting is done in 93.93 ms when one thread is used
Sorting is done in 31.57 ms when two threads are used
qsy775@fox05:~/courses/cs3733/assign4$